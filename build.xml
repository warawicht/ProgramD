<project default="jars" basedir=".">

    <!--Initialization Target-->
    <target name="init">
        <tstamp />
        <property name="Name" value="Program D" />
        <property name="version" value="4.6" />
        <property name="year" value="2006" />

        <property name="javac.compiler" value="modern" />
        <property name="javac.debug" value="on" />
        <property name="javac.optimize" value="on" />
        <property name="javac.deprecation" value="on" />
        <property name="javac.jvm-target" value="1.5" />
        <property name="javac.source" value="1.5" />

        <property name="src.dir" value="${basedir}/JavaSource" />
        <property name="webapp.dir" value="${basedir}/WebContent" />
        <property name="webapp.lib.dir" value="${webapp.dir}/WEB-INF/lib" />
        <property name="compile.lib.dir" value="${basedir}/lib" />
        <property name="distrib.dir" value="${basedir}/distrib" />

        <property name="build.dir" value="${basedir}/build.tmp" />
        <path id="build.classpath">
            <pathelement location="${compile.lib.dir}/gnu.getopt-1.0.10.jar" />
            <pathelement location="${compile.lib.dir}/jsp-api.jar" />
            <pathelement location="${webapp.lib.dir}/js.jar" />
            <pathelement location="${compile.lib.dir}/servlet-api.jar" />
            <pathelement location="${webapp.lib.dir}/log4j-1.2.13.jar" />
        </path>
        <property name="javadoc.dir" value="${basedir}/docs/api" />

        <property name="main.jar" value="${distrib.dir}/programd-main.jar" />
        <property name="rhino.jar" value="${distrib.dir}/programd-rhino.jar" />

        <property name="war" value="${distrib.dir}/programd.war" />

        <property name="distrib.src.dir" value="${distrib.dir}/distrib.src.tmp" />
        <property name="distrib.bin.dir" value="${distrib.dir}/distrib.bin.tmp" />
        <property name="distrib.war.dir" value="${distrib.dir}/distrib.war.tmp" />
        <property name="distrib.src.zip" value="${distrib.dir}/programd-${version}-src.zip" />
        <property name="distrib.bin.zip" value="${distrib.dir}/programd-${version}-bin.zip" />
        <property name="distrib.war.zip" value="${distrib.dir}/programd-${version}-war.zip" />
        <property name="distrib.src.tar.bz2" value="${distrib.dir}/programd-${version}-src.tar.bz2" />
        <property name="distrib.bin.tar.bz2" value="${distrib.dir}/programd-${version}-bin.tar.bz2" />
        <property name="distrib.war.tar.bz2" value="${distrib.dir}/programd-${version}-war.tar.bz2" />

        <filter token="year" value="${year}" />
        <filter token="version" value="${version}" />
        <filter token="date" value="${TODAY}" />
        <filter token="log" value="true" />
        <filter token="verbose" value="true" />

    </target>

    <!--Generate CoreSettings from core.xml.-->
    <target name="core-settings" depends="init">
        <xslt in="conf/core.xml" out="JavaSource/org/aitools/programd/CoreSettings.java" style="resources/xslt/generate-settings-class.xslt">
            <factory name="net.sf.saxon.TransformerFactoryImpl" />
        </xslt>
    </target>

    <!--Prepare the build directory.-->
    <target name="prepare" depends="init">
        <mkdir dir="${build.dir}" />
    </target>

    <!--Prepare the source code.-->
    <target name="prepare-src" depends="init, prepare">
        <mkdir dir="${build.dir}" />
        <!--Copy resources.-->
        <copy todir="${build.dir}">
            <fileset dir="${webapp.dir}" includes="resources/schema/**" />
        </copy>
    </target>

    <!--Compile the source directory.-->
    <target name="compile" depends="init, prepare-src">
    	<echo message="Java Debug Setting : ${javac.debug}" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" 
           classpathref="build.classpath" 
           debug="${javac.debug}" 
           deprecation="${javac.deprecation}" 
           optimize="${javac.optimize}" target="${javac.jvm-target}" source="${javac.source}">
           
            <compilerarg value="-Xlint" />
            <compilerarg value="-Xlint:-path" />
            <compilerarg value="-Xlint:-serial" />
        </javac>
    </target>

    <!--Create the jars.-->
    <target name="jars" depends="init, compile">
        <mkdir dir="${distrib.dir}" />
        <jar jarfile="${main.jar}">
            <fileset dir="${build.dir}/" includes="org/**" excludes="org/aitools/programd/interpreter/RhinoInterpreter.class" />
            <fileset dir="${src.dir}/" includes="org/aitools/programd/gui/icons/**" />
            <fileset dir="${build.dir}/" includes="resources/schema/**" />
        </jar>
        <jar jarfile="${rhino.jar}">
            <fileset dir="${build.dir}/" includes="org/aitools/programd/interpreter/RhinoInterpreter.class" />
        </jar>
    </target>

    <!--Create a WAR file.-->
    <target name="war" depends="init, compile">
        <delete file="${war}" />
        <war destfile="${war}" webxml="${webapp.dir}/WEB-INF/web.xml" manifest="${webapp.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${webapp.dir}">
                <include name="pages/**" />
            </fileset>
            <fileset dir="${basedir}">
                <include name="resources/**" />
                <exclude name="resources/database/**" />
                <exclude name="resources/icons/**" />
                <exclude name="resources/testing/**" />
                <exclude name="resources/xslt/**" />
            </fileset>
            <lib dir="${webapp.lib.dir}" />
            <classes dir="${build.dir}" />
            <classes dir="${basedir}/conf">
                <include name="log4j.xml" />
            </classes>
            <webinf dir="${webapp.dir}/WEB-INF">
                <include name="aiml.tld" />
                <include name="c.tld" />
                <include name="c-rt.tld" />
                <include name="dwr.xml" />
            </webinf>
        </war>
    </target>

    <!--Create the API documentation.-->
    <target name="javadoc" depends="init, prepare-src">
        <mkdir dir="${javadoc.dir}" />
        <javadoc packagenames="*" sourcepath="${src.dir}" destdir="${javadoc.dir}" classpathref="build.classpath" author="true" version="true" use="true" splitindex="true" noindex="false" windowtitle="${Name} API" doctitle="${Name} API">
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
            <link href="http://www.urbanophile.com/arenn/hacking/getopt/" />
            <link href="http://java.sun.com/j2ee/1.4/docs/api/" />
        </javadoc>
    </target>

    <!--Create the schema documentation.-->
    <!--Note: You'll need the xs3p stylesheet
	    (from http://titanium.dstc.edu.au/xml/xs3p/) to generate this.
	    Change the xs3p property below to match wherever you install it.-->
    <target name="schema-doc" depends="init">
        <property name="xs3p" value="/usr/local/xs3p/xs3p.xsl" />
        <property name="schema" value="../resources/schema" />
        <property name="schema-doc" value="../docs/schema" />
        <delete dir="${schema-doc}" />
        <xslt in="${schema}/AIML.xsd" out="${schema-doc}/AIML.html" style="${xs3p}">
            <param name="title" expression="A Schema for AIML 1.0.1" />
            <param name="sortByComponent" expression="false" />
        </xslt>
        <xslt in="${schema}/bot-configuration.xsd" out="${schema-doc}/bot-configuration.html" style="${xs3p}">
            <param name="title" expression="Program D Bot Configuration Schema" />
            <param name="sortByComponent" expression="false" />
        </xslt>
        <xslt in="${schema}/ChatLog.xsd" out="${schema-doc}/ChatLog.html" style="${xs3p}">
            <param name="title" expression="Program D Chat Log Schema" />
            <param name="sortByComponent" expression="false" />
        </xslt>
        <xslt in="${schema}/test-cases.xsd" out="${schema-doc}/test-cases.html" style="${xs3p}">
            <param name="title" expression="Program D Test Suite Schema" />
            <param name="sortByComponent" expression="false" />
        </xslt>
    </target>

    <!--Make the distribs.-->
    <target name="distribs" depends="init, source-distribs, binary-distribs, war-distribs" />

    <!--The source distribs.-->
    <target name="source-distribs" depends="init">
        <delete dir="${distrib.src.dir}" />
        <copy todir="${distrib.src.dir}">
            <fileset dir="${basedir}">
                <exclude name=".*" />
                <exclude name=".*/**" />
                <exclude name="aiml/**" />
                <exclude name="build.tmp/**" />
                <exclude name="classes/**" />
                <exclude name="distrib/**" />
                <exclude name="docs/**" />
                <exclude name="ffm/**" />
                <exclude name="lib/*-listener/*.jar" />
                <exclude name="logs/**" />
            </fileset>
        </copy>
        <zip destfile="${distrib.src.zip}">
            <zipfileset dir="${distrib.src.dir}" prefix="ProgramD/">
                <exclude name="bin/simple-console" />
                <exclude name="bin/simple-gui-console" />
            </zipfileset>
            <zipfileset dir="${distrib.src.dir}" prefix="ProgramD/" filemode="744">
                <include name="bin/simple-console" />
                <include name="bin/simple-gui-console" />
            </zipfileset>
        </zip>
        <tar destfile="${distrib.src.tar.bz2}" compression="bzip2">
            <tarfileset dir="${distrib.src.dir}" prefix="ProgramD/">
                <exclude name="bin/simple-console" />
                <exclude name="bin/simple-gui-console" />
            </tarfileset>
            <tarfileset dir="${distrib.src.dir}" prefix="ProgramD/" mode="744">
                <include name="bin/simple-console" />
                <include name="bin/simple-gui-console" />
            </tarfileset>
        </tar>
        <delete dir="${distrib.src.dir}" />
    </target>

    <!--The binary distribs.-->
    <target name="binary-distribs" depends="init, jars">
        <delete dir="${distrib.bin.dir}" />
        <copy todir="${distrib.bin.dir}">
            <fileset dir="${basedir}">
                <include name="**" />
                <exclude name=".*" />
                <exclude name=".*/**" />
                <exclude name="aiml/**" />
                <exclude name="build.tmp/**" />
                <exclude name="build.xml" />
                <exclude name="classes/**" />
                <exclude name="distrib/**" />
                <exclude name="docs/**" />
                <exclude name="ffm/**" />
                <exclude name="lib/*-listener/*.jar" />
                <exclude name="logs/**" />
                <exclude name="JavaSource/**" />
                <exclude name="secret.key" />
            </fileset>
            <fileset dir="${basedir}">
                <include name="distrib/programd-main.jar" />
                <include name="distrib/programd-rhino.jar" />
            </fileset>
        </copy>
        <zip destfile="${distrib.bin.zip}">
            <zipfileset dir="${distrib.bin.dir}" prefix="ProgramD/">
                <exclude name="bin/simple-console" />
                <exclude name="bin/simple-gui-console" />
            </zipfileset>
            <zipfileset dir="${distrib.bin.dir}" prefix="ProgramD/" filemode="744">
                <include name="bin/simple-console" />
                <include name="bin/simple-gui-console" />
            </zipfileset>
        </zip>
        <tar destfile="${distrib.bin.tar.bz2}" compression="bzip2">
            <tarfileset dir="${distrib.bin.dir}" prefix="ProgramD/">
                <exclude name="bin/simple-console" />
                <exclude name="bin/simple-gui-console" />
            </tarfileset>
            <tarfileset dir="${distrib.bin.dir}" prefix="ProgramD/" mode="744">
                <include name="bin/simple-console" />
                <include name="bin/simple-gui-console" />
            </tarfileset>
        </tar>
        <delete dir="${distrib.bin.dir}" />
    </target>

    <!--The war distribs.-->
    <target name="war-distribs" depends="init, war">
        <delete dir="${distrib.war.dir}" />
        <copy todir="${distrib.war.dir}">
            <fileset dir="${basedir}">
                <include name="conf/**" />
                <include name="resources/testing/AIML.aiml" />
                <include name="resources/testing/AIML.xml" />
            </fileset>
            <fileset dir="${distrib.dir}">
                <include name="programd.war" />
            </fileset>
        </copy>
        <zip destfile="${distrib.war.zip}">
            <zipfileset dir="${distrib.war.dir}" prefix="ProgramD/" />
        </zip>
        <tar destfile="${distrib.war.tar.bz2}" compression="bzip2">
            <tarfileset dir="${distrib.war.dir}" prefix="ProgramD/" />
        </tar>
        <delete dir="${distrib.war.dir}"/>
    </target>

    <!--Clean up everything.-->
    <target name="clean" depends="init, buildclean, distclean"/>

    <!--Clean the build stuff.-->
    <target name="buildclean" depends="init">
        <delete dir="${build.dir}"/>
        <delete file="${main.jar}"/>
        <delete file="${rhino.jar}"/>
    </target>

    <!--Clean up all the distrib stuff.-->
    <target name="distclean" depends="init, source-distclean, binary-distclean, war-distclean"/>

    <!--Clean up the source distribs.-->
    <target name="source-distclean" depends="init">
        <delete dir="${distrib.src.dir}"/>
        <delete file="${distrib.src.zip}"/>
        <delete file="${distrib.src.tar.bz2}"/>
    </target>

    <!--Clean up the binary distribs.-->
    <target name="binary-distclean" depends="init">
        <delete dir="${build.dir}"/>
        <delete file="${main.jar}"/>
        <delete file="${rhino.jar}"/>
        <delete dir="${distrib.bin.dir}"/>
        <delete file="${distrib.bin.zip}"/>
        <delete file="${distrib.bin.tar.bz2}"/>
    </target>

    <!--Clean up the war distribs.-->
    <target name="war-distclean" depends="init">
        <delete file="${war}"/>
        <delete dir="${distrib.war.dir}"/>
        <delete file="${distrib.war.zip}"/>
        <delete file="${distrib.war.tar.bz2}"/>
    </target>

    <!--Generate the multibot test files.-->
    <target name="multibot" depends="init">
        <delete file="resources/testing/multibot/bots.xml"/>
        <xslt in="resources/xslt/generate-multibot.xslt"
              out="resources/testing/multibot/bots.xml"
    	      style="resources/xslt/generate-multibot.xslt">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
        </xslt>
    </target>

</project>
